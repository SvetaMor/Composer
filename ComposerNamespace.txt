Краткое эссе по теме "Namespace и Composer".

1. Пространство имен (namespace).
Namespace - инструмент программирования, в языке php появился в версии 5.3,
задается для классов (путь к данному файлу). Пространство имен решает проблему дублирования классов.

2. Пакетный менеджер Composer.
Composer - пакетный менеджер зависимостей. Помогает не засорять репозиторий многочисленными баблиотеками 
(из проекта переносит в git только файлы самого проекта, без установленных библиотек, 
а затем у другого пользователя сам закачивает необходимые библиотеки),
синхронизирует версии библиотек (при изменении версии библиотеки одним пользователем у других обновляет автоматически).

3. Git tags.
Часто при большом количестве коммитов в гит трудно найти нужную версию программы,
особенно тем членам команды, которые плохо разбираются в коде (надо заходить в ветку в репозитории и читать изменения).
Для удобства ввели понятие 'версии проета' - это некая метка важного коммита (ему дается имя, например, v10.2 и описание change log).
Для просмотра этих меток c сылкой на соответсвующий commit используется команда git show-ref --tags. 
Обратная совметстимость - успешное обновление библиотек, используемых в проете, с более низкой на более высокую версию.
Версионирование (SemVer): мажорная версия (значительные изменения), минорная версия (незначительные изменения, не нарушает обратной совместимости),
патч-версия (чаще всего исправление ошибок программирования).
Если в нескольких проектах планируется использовать одни и теже обственные наработки, то можно создать собственные Composer пакеты
. Для этого необходимо:
Оформить (настроить) пакет -> опубликовать код в репозитории -> Создать и настроить пакет на Packagist и далее можно исползовать пакет.

4.Создание собственного Composer пакета.
Сначала надо установить в проет composer и сконфигурировать пакет (команда php composer.phar init, указать название пакета,
описание проекта, автора, тип пакета, лицензая, зависимости). Затем в созданном файле composer.json добавить автозагрузку.
Загружаем наш пакет в репозиторий и создаем его на Packagist. Теперь надо связать Packagist и удаленный репозиторий,
чтобы при внесении изменений в пакет они автоматически обновлялись и на Packagist.
Composer install считывает файл composer.json, находит там зависимости и принимает решение о том, какие надо установить версии.
Установленные версии будут записаны в файл composer.lock. 
Composer update не смотрит файл composer.lock, а каждый раз считывает composer.json, находит новые версии, скачивает,
устанавливает их и затем перезаписывает файл composer.lock.
